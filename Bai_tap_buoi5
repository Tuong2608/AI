import tkinter as tk
from tkinter import messagebox
from collections import deque

def is_safe(state, row, col):
    for r, c in enumerate(state):
        if c == col or abs(c - col) == abs(r - row):
            return False
    return True

def bfs_generate(n=8):
    queue = deque([[]])
    while queue:
        state = queue.popleft()
        row = len(state)
        if row == n:
            yield state
        else:
            for col in range(n):
                if is_safe(state, row, col):
                    queue.append(state + [col])

class QueensBFS_GUI:
    def __init__(self, master, n=8):
        self.master = master
        self.n = n
        self.master.title("8-Queens Puzzle (BFS)")
        self.master.configure(bg="#1E1E1E")

        self.cells = [[None]*n for _ in range(n)]
        frame = tk.Frame(master, bg="#1E1E1E")
        frame.pack(pady=20)

        board_frame = tk.LabelFrame(frame, text="Bàn cờ BFS 8-Queens", padx=10, pady=10,
                                    font=("Arial", 12, "bold"), bg="#1E1E1E", fg="white", bd=3, labelanchor="n")
        board_frame.grid(row=0, column=0, padx=15)

        for r in range(n):
            for c in range(n):
                color = "#EEEED2" if (r+c) % 2 == 0 else "#769656"
                lbl = tk.Label(board_frame, text=" ", width=3, height=1,
                               font=("Arial", 30, "bold"), bg=color)
                lbl.grid(row=r, column=c, padx=1, pady=1, ipadx=5, ipady=5)
                self.cells[r][c] = lbl

        self.solution_label = tk.Label(master, text="", font=("Arial", 13, "bold"),
                                       bg="#1E1E1E", fg="yellow")
        self.solution_label.pack(pady=10)

        btn_frame = tk.Frame(master, bg="#1E1E1E")
        btn_frame.pack(pady=5)

        style = {"font": ("Arial", 12, "bold"), "bg": "#444", "fg": "white",
                 "relief": "raised", "bd": 2, "width": 10, "height": 2}

        self.btn_start = tk.Button(btn_frame, text="Bắt đầu BFS", command=self.start_bfs, **style)
        self.btn_start.grid(row=0, column=0, padx=6, pady=3)

        self.btn_next = tk.Button(btn_frame, text="Next", command=self.next_solution, state=tk.DISABLED, **style)
        self.btn_next.grid(row=0, column=1, padx=6, pady=3)

        self.btn_clear = tk.Button(btn_frame, text="Xóa hết", command=self.clear_board, **style)
        self.btn_clear.grid(row=0, column=2, padx=6, pady=3)

        self.generator = None
        self.current_solution = None
        self.solution_index = 0

    def clear_board(self):
        for r in range(self.n):
            for c in range(self.n):
                self.cells[r][c].config(text=" ")
        self.solution_label.config(text="")
        self.solution_index = 0
        self.generator = None
        self.current_solution = None
        self.btn_next.config(state=tk.DISABLED)

    def start_bfs(self):
        self.clear_board()
        self.generator = bfs_generate(self.n)
        self.solution_index = 0
        self.btn_next.config(state=tk.NORMAL)
        messagebox.showinfo("Thông báo", "BFS đã bắt đầu! Bấm 'Next' để xem nghiệm tiếp theo.")

    def show_solution(self, sol):
        for r in range(self.n):
            for c in range(self.n):
                self.cells[r][c].config(text=" ")

        for r, c in enumerate(sol):
            self.cells[r][c].config(text="♛", fg="gold")

        self.solution_label.config(text=f"Nghiệm {self.solution_index}")

    def next_solution(self):
        try:
            self.current_solution = next(self.generator)
            self.solution_index += 1
            self.show_solution(self.current_solution)
        except StopIteration:
            messagebox.showinfo("Kết thúc", "Đã duyệt hết nghiệm BFS.")
            self.btn_next.config(state=tk.DISABLED)


if __name__ == "__main__":
    root = tk.Tk()
    app = QueensBFS_GUI(root, n=8)
    root.mainloop()
